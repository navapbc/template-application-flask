[tool.poetry]
name = "template-application-flask"
version = "0.1.0"
description = "A template flask API for building ontop of"
packages = [{ include = "api" }]
authors = ["Nava Engineering <engineering@navapbc.com>"]
include = ["openapi.yml"]

# Base packages for all versions of the images
# Any packages needed for scripts called from outside of the app
# would go here, ie create-user-csv
[tool.poetry.dependencies]
python = "^3.10"

[tool.poetry.group.app]
optional = true

# Packages needed for the app, will be in the release image
# Pin the version to a specific version to speed up build times
## https://github.com/python-poetry/poetry/issues/2094
[tool.poetry.group.app.dependencies]
SQLAlchemy = {extras = ["mypy"], version = "1.4.46"}
alembic = "1.9.1"
psycopg2-binary = "2.9.5"
python-dotenv = "0.21.0"
pydantic = "1.10.4"
botocore = "1.29.49"
boto3 = "1.26.49"
smart-open = "6.3.0"
pytz = "2022.7"
APIFlask = "1.2.1"
marshmallow-dataclass = {extras = ["enum", "union"], version = "8.5.11"}
marshmallow = "3.19.0"

[tool.poetry.group.dev]
optional = true

# Local only packages, any packages needed for the testing suite
# Pin the version to a specific version to speed up build times
## https://github.com/python-poetry/poetry/issues/2094
[tool.poetry.group.dev.dependencies]
pytest = "7.2.0"
black = "22.12.0"
flake8 = "6.0.0"
flake8-bugbear = "22.12.6"
flake8-alfred = "1.1.1"
isort = "5.11.4"
mypy = "0.991"
moto = {extras = ["s3"], version = "4.1.0"}
types-pytz = "2022.7.0.0"
coverage = "7.0.5"
Faker = "16.4.0"
factory-boy = "3.2.1"
bandit = "1.7.4"
pytest-watch = "^4.2.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
run-api = "api.__main__:main"
db-migrate-up = "api.db.migrations.run:up"
db-migrate-down = "api.db.migrations.run:down"
db-migrate-down-all = "api.db.migrations.run:downall"
create-user-csv = "api.services.users.create_user_csv:main"

[tool.black]
line-length = 100

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 100

[tool.mypy]
# https://mypy.readthedocs.io/en/stable/config_file.html
color_output = true
error_summary = true
pretty = true
show_error_codes = true
show_column_numbers = true
show_error_context = true

namespace_packages = true
ignore_missing_imports = true
warn_unused_configs = true

check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_equality = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

plugins = ["sqlalchemy.ext.mypy.plugin"]

[tool.bandit]
# Ignore audit logging test file since test audit logging requires a lot of operations that trigger bandit warnings
exclude_dirs = ["./tests/api/logging/test_audit.py"]

[[tool.mypy.overrides]]
# Migrations are generated without "-> None"
# for the returns. Rather than require manually
# fixing this for every migration generated,
# disable the check for that folder.
module = "api.db.migrations.versions.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
# Ignore deprecation warnings in library code.
# When a library has addressed its deprecation issues and we've updated the
# library, we can remove the ignore filter for that library.
filterwarnings = [
  "ignore::DeprecationWarning:botocore.*",
  "ignore::DeprecationWarning:apispec.*",
  "ignore::DeprecationWarning:certifi.*"] # pytest-watch errors if the closing bracket is on it's own line

markers = [
  "audit: mark a test as a security audit log test, to be run isolated from other tests"]

[tool.coverage.run]
omit = ["api/db/migrations/*.py"]

