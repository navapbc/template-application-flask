[tool.poetry]
name = "template-application-flask"
version = "0.1.0"
description = "A template flask API for building ontop of"
packages = [{ include = "src" }]
authors = ["Nava Engineering <engineering@navapbc.com>"]

[tool.poetry.dependencies]
python = "^3.12"
SQLAlchemy = {version = "^2.0.21", extras = ["mypy"]}
alembic = "^1.12.0"
python-dotenv = "^1.0.0"
pydantic = "^2.4.2"
botocore = "^1.31.62"
boto3 = "^1.28.62"
smart-open = "^6.1.0"
pytz = "^2023.3.post1"
APIFlask = "^2.0.2"
marshmallow-dataclass = {extras = ["enum", "union"], version = "^8.5.8"}
marshmallow = "^3.20.1"
gunicorn = "^21.2.0"
psycopg = {extras = ["binary"], version = "^3.1.10"}
pydantic-settings = "^2.0.3"

[tool.poetry.group.dev.dependencies]
black = "^23.9.1"
flake8 = "^6.1.0"
flake8-bugbear = "^23.9.16"
flake8-alfred = "^1.1.1"
isort = "^5.12.0"
mypy = "^1.5.1"
moto = {extras = ["s3"], version = "^4.0.2"}
types-pytz = "^2023.3.1.1"
coverage = "^7.3.2"
Faker = "^19.8.0"
factory-boy = "^3.3.0"
bandit = "^1.7.5"
pytest = "^7.4.2"
pytest-watch = "^4.2.0"
pytest-lazy-fixture = "^0.6.3"
types-pyyaml = "^6.0.12.11"
setuptools = "^68.2.2"
debugpy = "^1.8.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
db-migrate = "src.db.migrations.run:up"
db-migrate-down = "src.db.migrations.run:down"
db-migrate-down-all = "src.db.migrations.run:downall"

[tool.black]
line-length = 100

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 100

[tool.mypy]
# https://mypy.readthedocs.io/en/stable/config_file.html
color_output = true
error_summary = true
pretty = true
show_error_codes = true
show_column_numbers = true
show_error_context = true

namespace_packages = true
ignore_missing_imports = true
warn_unused_configs = true

check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_equality = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

plugins = ["pydantic.mypy"]

[tool.bandit]
# Ignore audit logging test file since test audit logging requires a lot of operations that trigger bandit warnings
exclude_dirs = ["./tests/src/logging/test_audit.py"]

[[tool.mypy.overrides]]
# Migrations are generated without "-> None"
# for the returns. Rather than require manually
# fixing this for every migration generated,
# disable the check for that folder.
module = "src.db.migrations.versions.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
# Ignore deprecation warnings in library code.
# When a library has addressed its deprecation issues and we've updated the
# library, we can remove the ignore filter for that library.
filterwarnings = [
  "ignore::DeprecationWarning:botocore.*"] # pytest-watch errors if the closing bracket is on it's own line

markers = [
  "audit: mark a test as a security audit log test, to be run isolated from other tests"]

[tool.coverage.run]
omit = ["src/db/migrations/*.py"]

