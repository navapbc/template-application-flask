[tool.poetry]
name = "template-application-flask"
version = "0.1.0"
description = "A template flask API for building ontop of"
packages = [{ include = "src" }]
authors = ["Nava Engineering <engineering@navapbc.com>"]

[tool.poetry.dependencies]
python = "^3.10"
SQLAlchemy = {extras = ["mypy"], version = "^1.4.40"}
alembic = "^1.8.1"
psycopg2-binary = "^2.9.3"
python-dotenv = "^0.20.0"
pydantic = "^1.10.0"
botocore = "^1.27.67"
boto3 = "~1.24.67"
smart-open = "^6.1.0"
pytz = "^2022.2.1"
APIFlask = "^1.1.3"
marshmallow-dataclass = {extras = ["enum", "union"], version = "^8.5.8"}
marshmallow = "^3.18.0"

[tool.poetry.dev-dependencies]
pytest = "^6.0.0"
black = "^22.6.0"
flake8 = "^5.0.4"
flake8-bugbear = "^22.8.23"
flake8-alfred = "^1.1.1"
isort = "^5.10.1"
mypy = "^0.971"
moto = {extras = ["s3"], version = "^4.0.2"}
types-pytz = "^2022.2.1"
coverage = "^6.4.4"
Faker = "^14.2.0"
factory-boy = "^3.2.1"
bandit = "^1.7.4"

[tool.poetry.group.dev.dependencies]
pytest-watch = "^4.2.0"
pytest-lazy-fixture = "^0.6.3"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
app-start = "src.__main__:main"
db-migrate-up = "src.db.migrations.run:up"
db-migrate-down = "src.db.migrations.run:down"
db-migrate-down-all = "src.db.migrations.run:downall"

[tool.black]
line-length = 100

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 100

[tool.mypy]
# https://mypy.readthedocs.io/en/stable/config_file.html
color_output = true
error_summary = true
pretty = true
show_error_codes = true
show_column_numbers = true
show_error_context = true

namespace_packages = true
ignore_missing_imports = true
warn_unused_configs = true

check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_equality = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

plugins = ["sqlalchemy.ext.mypy.plugin"]

[tool.bandit]
# Ignore audit logging test file since test audit logging requires a lot of operations that trigger bandit warnings
exclude_dirs = ["./tests/src/logging/test_audit.py"]

[[tool.mypy.overrides]]
# Migrations are generated without "-> None"
# for the returns. Rather than require manually
# fixing this for every migration generated,
# disable the check for that folder.
module = "src.db.migrations.versions.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
# Ignore deprecation warnings in library code.
# When a library has addressed its deprecation issues and we've updated the
# library, we can remove the ignore filter for that library.
filterwarnings = [
  "ignore::DeprecationWarning:botocore.*",
  "ignore::DeprecationWarning:apispec.*",
  "ignore::DeprecationWarning:certifi.*"] # pytest-watch errors if the closing bracket is on it's own line

markers = [
  "audit: mark a test as a security audit log test, to be run isolated from other tests"]

[tool.coverage.run]
omit = ["src/db/migrations/*.py"]

